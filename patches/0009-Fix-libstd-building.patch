From 39b5362027bdf7743cbd898a87259bd19a9f2022 Mon Sep 17 00:00:00 2001
From: bjorn3 <bjorn3@users.noreply.github.com>
Date: Thu, 27 Dec 2018 11:10:58 +0100
Subject: [PATCH 09/10] Fix libstd building

---
 src/libstd/sys/unix/net.rs           | 3 +++
 src/libstd/sys/unix/pipe.rs          | 3 +++
 src/libstd/sys/unix/thread_local.rs  | 3 +++
 src/libstd/sys_common/at_exit_imp.rs | 2 +-
 src/libstd/sys_common/thread.rs      | 3 +++
 5 files changed, 13 insertions(+), 1 deletion(-)

diff --git a/src/libstd/sys_common/at_exit_imp.rs b/src/libstd/sys_common/at_exit_imp.rs
index cd2d176..05932a0 100644
--- a/src/libstd/sys_common/at_exit_imp.rs
+++ b/src/libstd/sys_common/at_exit_imp.rs
@@ -54,7 +54,7 @@ pub fn cleanup() {
                 let queue: Box<Queue> = Box::from_raw(queue);
                 for to_run in *queue {
                     // We are not holding any lock, so reentrancy is fine.
-                    to_run();
+                    //to_run();
                 }
             }
         }
diff --git a/src/libstd/sys_common/thread.rs b/src/libstd/sys_common/thread.rs
index fe9ad76..2fe10dd 100644
--- a/src/libstd/sys_common/thread.rs
+++ b/src/libstd/sys_common/thread.rs
@@ -6,12 +6,15 @@ use sys::thread as imp;

 #[allow(dead_code)]
 pub unsafe fn start_thread(main: *mut u8) {
+    /*
     // Next, set up our stack overflow handler which may get triggered if we run
     // out of stack.
     let _handler = stack_overflow::Handler::new();

     // Finally, let's run some code.
     Box::from_raw(main as *mut Box<dyn FnBox()>)()
+    */
+    unimplemented!();
 }

 pub fn min_stack() -> usize {
--
2.11.0
